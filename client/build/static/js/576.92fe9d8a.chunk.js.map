{"version":3,"file":"static/js/576.92fe9d8a.chunk.js","mappings":"6NASe,SAASA,IACtB,IACMC,GAASC,EAAAA,EAAAA,aACTC,GAAWC,EAAAA,EAAAA,eAEjBC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxBI,GAAFF,EAAA,GAAUA,EAAA,IACtBG,GAA8BJ,EAAAA,EAAAA,UAAS,MAAKK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAAkCR,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA4CZ,EAAAA,EAAAA,WAAS,GAAMa,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,IAExCG,EAAAA,EAAAA,YAAU,WACR,GAAKrB,EAAL,CAIA,IAAMsB,EAAe,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAC/D,gCAGGL,GAILtB,EAAO4B,sBAAsBN,GAAcO,MAAK,SAAAC,GAC9C,OAD8DA,EAAbC,cAC3BC,QACpB,IAAK,YACHpB,EAAW,sBACX,MACF,IAAK,aACHA,EAAW,+BACX,MACF,IAAK,0BACHA,EAAW,sDACX,MACF,QACEA,EAAW,yBAGjB,GAzBA,CA0BF,GAAG,CAACZ,KAEJqB,EAAAA,EAAAA,YAAU,WACJrB,GACFoB,GAAkB,EAEtB,GAAG,CAACpB,IAEJ,IAAMiC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAC,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACR,GAAnBN,EAAEO,iBAEG9C,GAAWE,EAAQ,CAAAyC,EAAAE,KAAA,eAAAF,EAAAI,OAAA,iBAML,OAAnB/B,GAAa,GAAM2B,EAAAE,KAAA,EAEK7C,EAAOgD,eAAe,CAC5C9C,SAAAA,EACA+C,cAAe,CAEbC,WA7DoD,gCA+DrD,KAAD,EAAAV,EAAAG,EAAAQ,KAOiB,gBAbXV,EAAKD,EAALC,OAaEW,MAAwC,qBAAfX,EAAMW,KACvCxC,EAAW6B,EAAM9B,SAEjBC,EAAW,iCAGbI,GAAa,GAAO,yBAAA2B,EAAAU,OAAA,GAAAf,EAAA,KACrB,gBA/BiBgB,GAAA,OAAApB,EAAAqB,MAAA,KAAAC,UAAA,KAqClB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAC7BxC,IACDyC,EAAAA,EAAAA,MAAA,QAAMC,GAAG,eAAeC,SAAU7B,EAAa0B,SAAA,EAC7CF,EAAAA,EAAAA,KAACM,EAAAA,0BAAyB,CACxBF,GAAG,8BACHG,SAAU,SAACzB,GAAC,OAAK/B,EAAS+B,EAAE0B,OAAOC,MAAM,KAE3CT,EAAAA,EAAAA,KAACU,EAAAA,eAAc,CAACN,GAAG,kBAAkBO,QAZX,CAC5BC,OAAQ,WAYNZ,EAAAA,EAAAA,KAAA,UAAQa,SAAUvD,IAAcf,IAAWE,EAAU2D,GAAG,SAAQF,UAC9DF,EAAAA,EAAAA,KAAA,QAAMI,GAAG,cAAaF,SACnB5C,GAAY0C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAAUG,GAAG,YAAmB,cAI/DlD,IAAW8C,EAAAA,EAAAA,KAAA,OAAKI,GAAG,kBAAiBF,SAAEhD,QAK7C,C","sources":["components/subscription/CheckoutForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport './checkout-form.css'\r\nimport {\r\n  PaymentElement,\r\n  LinkAuthenticationElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nexport default function CheckoutForm() {\r\n  const clientURL = process.env.NODE_ENV === 'production' ? 'https://football-tank.site' : 'http://localhost:3000/';\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isStripeLoaded, setIsStripeLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      return;\r\n    }\r\n\r\n    const clientSecret = new URLSearchParams(window.location.search).get(\r\n      \"payment_intent_client_secret\"\r\n    );\r\n\r\n    if (!clientSecret) {\r\n      return;\r\n    }\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"Payment succeeded!\");\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"Your payment is processing.\");\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"Your payment was not successful, please try again.\");\r\n          break;\r\n        default:\r\n          setMessage(\"Something went wrong.\");\r\n          break;\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  useEffect(() => {\r\n    if (stripe) {\r\n      setIsStripeLoaded(true);\r\n    }\r\n  }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js hasn't yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: clientURL,\r\n      },\r\n    });\r\n\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occurred.\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const paymentElementOptions = {\r\n    layout: \"tabs\"\r\n  }\r\n\r\n  return (\r\n    <div className=\"checkout-form\">\r\n    {isStripeLoaded && (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <LinkAuthenticationElement\r\n        id=\"link-authentication-element\"\r\n        onChange={(e) => setEmail(e.target.value)}\r\n      />\r\n      <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\r\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\r\n        <span id=\"button-text\">\r\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\r\n        </span>\r\n      </button>\r\n      {/* Show any error or success messages */}\r\n      {message && <div id=\"payment-message\">{message}</div>}\r\n    </form>\r\n    )}\r\n    </div>\r\n  );\r\n}"],"names":["CheckoutForm","stripe","useStripe","elements","useElements","_useState","useState","_useState2","_slicedToArray","setEmail","_useState3","_useState4","message","setMessage","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","isStripeLoaded","setIsStripeLoaded","useEffect","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","_ref","paymentIntent","status","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","_yield$stripe$confirm","error","wrap","_context","prev","next","preventDefault","abrupt","confirmPayment","confirmParams","return_url","sent","type","stop","_x","apply","arguments","_jsx","className","children","_jsxs","id","onSubmit","LinkAuthenticationElement","onChange","target","value","PaymentElement","options","layout","disabled"],"sourceRoot":""}